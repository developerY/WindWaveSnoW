[versions]
agp = "8.6.0-alpha07"
kotlin = "1.9.20"
coroutines = "1.7.3"
coreKtx = "1.12.0"
androidxRoom = "2.6.0"

androidxNavigation = "2.7.5"
hilt = "2.46.1"
androidxHilt = "1.1.0"

junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntime = "2.6.2"
activityCompose = "1.8.1"
composeBom = "2023.10.01"
androidxComposeCompiler = "1.5.4"
accompanistVersion = "0.33.1-alpha"

appcompat = "1.6.1"
material = "1.10.0"
materialIcons = "1.5.4"

composeWear = "1.3.0"

kotlinxDatetime = "0.4.1"
appcompatVersion = "1.6.1"
materialVersion = "1.10.0"

cameraxVersion = "1.3.0-rc01"


#Machine Learning
mlKitFace = "16.1.6"

# ML Kit on Play Services
mlkitImgID = "16.0.8"
mlkitImg2txt = "19.0.0"
mlKitFacePlay = "17.1.0"
# TFLite
tensorflowLiteSupport = "0.1.0"
tensorflowLiteMetadata = "0.1.0"
tensorflowLiteTaskVision = "0.4.0"


coil = "2.4.0"

ksp = "1.9.20-1.0.14"

okhttp = "4.11.0"
apollo = "3.7.4" # apollo-graphql

flipCompose = "1.0.6"

googleMaps = "4.3.0"
#plugins
mapsplatformSecretsPlugin = "2.0.1"
cameraLifecycleVersion = "1.3.1"
androidxLifecycle = "2.6.0"
tensorflowLiteGpuVersion = "2.3.0"
tensorflowLiteSupportVersion = "0.1.0"
tensorflowLiteMetadataVersion = "0.1.0"
googleGenAI =  "0.3.0"
constraintlayoutVersion = "2.1.4"
uiAndroidVersion = "1.6.0"


[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }

androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntime" }
androidx-lifecycle-runtime-compose = { group = "androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "lifecycleRuntime"}

androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidxLifecycle" }


kotlin-gradle-plugin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }


# Compose
# Compose BOM
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
# Compose Navigation
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "androidxNavigation" }
# Compose Material3
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
# Compose UI -- Graphics
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
#Compose Tooling -- Preivew
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
#Compose Testing
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }

androidx-compose-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-compose-compiler = { module = "androidx.compose.compiler:compiler", version.ref = "androidxComposeCompiler" }

androidx-compose-material-icons-extended = { module = "androidx.compose.material:material-icons-extended", version.ref = "materialIcons" }
# androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
#material = { group = "com.google.android.material", name = "material", version.ref = "material" }

# Room
androidx-room-runtime = { module = "androidx.room:room-runtime", version.ref = "androidxRoom" }
androidx-room-ktx = { module = "androidx.room:room-ktx", version.ref = "androidxRoom" }
androidx-room-compiler = { module = "androidx.room:room-compiler", version.ref = "androidxRoom" }

#// CAMERA STUFF ////
androidx-camera-core = { module = "androidx.camera:camera-core",version.ref = "cameraxVersion" }
androidx-camera-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "cameraxVersion" }
androidx-camera-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "cameraxVersion" }
androidx-camera-video = { module = "androidx.camera:camera-video", version.ref = "cameraxVersion" }
androidx-camera-view = { module = "androidx.camera:camera-view", version.ref = "cameraxVersion" }
androidx-camera-extensions = { module = "androidx.camera:camera-extensions", version.ref = "cameraxVersion" }

coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Machine Learning
# Face features
mlkit-face-detection = { module = "com.google.mlkit:face-detection", version.ref = "mlKitFace" }


# TFLite
# tensorflow-lite-support = { group = "org.tensorflow", name = "tensorflow-lite-support", version.ref = "tensorflowLiteSupport" }
# tensorflow-lite-metadata = { group = "org.tensorflow", name = "tensorflow-lite-metadata", version.ref = "tensorflowLiteMetadata" }
tensorflow-lite-task-vision = { module = "org.tensorflow:tensorflow-lite-task-vision", version.ref = "tensorflowLiteTaskVision"}

# tensorflow-lite-gpu = { group = "org.tensorflow", name = "tensorflow-lite-gpu", version.ref = "tensorflowLiteGpuVersion" }

# Import the GPU delegate plugin Library for GPU inference
# implementation 'org.tensorflow:tensorflow-lite-gpu-delegate-plugin:0.4.0'
# implementation 'org.tensorflow:tensorflow-lite-gpu:2.9.0'


# ML with Play Services
# Text features
play-services-mlkit-image = { module = "com.google.android.gms:play-services-mlkit-image-labeling" , version.ref = "mlkitImgID" }
play-services-mlkit-text-recognition = { module = "com.google.android.gms:play-services-mlkit-text-recognition" , version.ref = "mlkitImg2txt" }
# same mlkit-text-recognition = { group = "com.google.android.gms", name = "play-services-mlkit-text-recognition", version.ref = "mlKit" }

# Use this dependency to use the dynamically downloaded model in Google Play Services
play-services-mlkit-face-detection = { module = "com.google.android.gms:play-services-mlkit-face-detection" , version.ref = "mlKitFacePlay" }

# Gemini
google-ai-generativeai = { module = "com.google.ai.client.generativeai:generativeai", version.ref = "googleGenAI"}
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Machine Learning


#// ACCOMPANIST ////
androidx-accompanist-permissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanistVersion" }

okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
apollo-graphql = { module = "com.apollographql.apollo3:apollo-runtime", version.ref = "apollo" }
apollo-graphql-cache = { module = "com.apollographql.apollo3:apollo-normalized-cache", version.ref = "apollo" }

# Hilt
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
hilt-android-compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hilt" }
hilt-gradle-plugin = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "hilt" }

hilt-android-testing = { module = "com.google.dagger:hilt-android-testing", version.ref = "hilt" }
hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt" }

androidx-hilt-navigation-compose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "androidxHilt" }

# Google Maps - Android Maps Compose composables for the Maps SDK for Android
google-maps-compose = {  module = "com.google.maps.android:maps-compose", version.ref = "googleMaps"}

# Wear
androidx-wear-compose-foundation = { group = "androidx.wear.compose", name = "compose-foundation", version.ref = "composeWear" }
androidx-wear-compose-material = { group = "androidx.wear.compose", name = "compose-material", version.ref = "composeWear" }
androidx-wear-compose-navigation = { group = "androidx.wear.compose", name = "compose-navigation", version = "1.3.0" }

android-tools-build-gradle-plugin = { group = "com.android.tools.build", name = "gradle", version.ref = "agp" }


squareup-retrofit = {module = 'com.squareup.retrofit2:retrofit', version ='2.9.0'}
squareup-retrofit-converter-gson = {module = 'com.squareup.retrofit2:converter-gson', version ='2.9.0'}
squareup-okhttp3-logging-interceptor = {module ='com.squareup.okhttp3:logging-interceptor', version = '4.9.1'}


# Play
google-play-feature-delivery = { module = "com.google.android.play:feature-delivery", version = "2.1.0" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompatVersion" }
material = { group = "com.google.android.material", name = "material", version.ref = "materialVersion" }

# Third Party - Try to remove in the future
waj-compose-flip =  {group = "com.wajahatkarim", name = "flippable",version.ref = "flipCompose"}
tensorflow-lite-support = { group = "org.tensorflow", name = "tensorflow-lite-support", version.ref = "tensorflowLiteSupportVersion" }
tensorflow-lite-metadata = { group = "org.tensorflow", name = "tensorflow-lite-metadata", version.ref = "tensorflowLiteMetadataVersion" }

# Pager
google-accompanist-pager = { module = "com.google.accompanist:accompanist-pager", version = "0.25.1"}
google-accompanist-pager-indicators = { module = "com.google.accompanist:accompanist-pager-indicators", version = "0.25.1" }
androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayoutVersion" }
androidx-ui-android = { group = "androidx.compose.ui", name = "ui-android", version.ref = "uiAndroidVersion" }


[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
mapsplatform-secrets = { id = "com.google.android.libraries.mapsplatform.secrets-gradle-plugin", version.ref = "mapsplatformSecretsPlugin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
apollo-graphql = { id = "com.apollographql.apollo3", version.ref = "apollo" }
hilt-gradle = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }



windwatersnow-android-application = { id = "windwatersnow.android.application", version = "unspecified" }
windwatersnow-android-library = { id = "windwatersnow.android.library", version = "unspecified" }
windwatersnow-android-test = { id = "windwatersnow.android.test", version = "unspecified" }
windwatersnow-compose = { id = "windwatersnow.compose", version = "unspecified" }
windwatersnow-dynamic = { id = "windwatersnow.dynamic", version = "unspecified" }

